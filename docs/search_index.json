[["index.html", "Earth Hologenome Initiative | Razgour et al. Study title to be added Chapter 1 Introduction 1.1 Prepare the R environment", " Earth Hologenome Initiative | Razgour et al. Study title to be added Orly Razgour1 Antton Alberdi2 2025-08-13 Chapter 1 Introduction This webbook contains all the code used for data analysis in study of the population-level metagenomic data of Podarcis muralis lizards across elevational gradients in various mountain ranges of the Pyrenees. 1.1 Prepare the R environment 1.1.1 Environment To reproduce all the analyses locally, clone this repository in your computer using: RStudio &gt; New Project &gt; Version Control &gt; Git And indicating the following git repository: https://github.com/earthhologenome/bechsteinii_pollution.git Once the R project has been created, follow the instructions and code chunks shown in this webbook. 1.1.2 Libraries The following R packages are required for the data analysis. # Base library(R.utils) library(knitr) library(tidyverse) library(devtools) library(tinytable) library(rairtable) # For tree handling library(ape) library(phyloseq) library(phytools) # For plotting library(ggplot2) library(ggrepel) library(ggpubr) library(ggnewscale) library(gridExtra) library(ggtreeExtra) library(ggtree) library(ggh4x) # For statistics library(spaa) library(vegan) library(Rtsne) library(geiger) library(hilldiv2) library(distillR) library(broom.mixed) #library(lmerTest) library(Hmsc) library(corrplot) University of Exeter, o.razgour@exeter.ac.uk↩︎ University of Copenhagen, antton.alberdi@sund.ku.dk↩︎ "],["data-preparation.html", "Chapter 2 Data preparation 2.1 Load data 2.2 Create working objects 2.3 Prepare color scheme 2.4 Wrap working objects", " Chapter 2 Data preparation 2.1 Load data Load the original data files outputted by the bioinformatic pipeline. 2.1.1 Sample metadata sample_metadata &lt;- read_tsv(&quot;data/DMB0180_metadata.tsv.gz&quot;) %&gt;% rename(sample=1) 2.1.2 Genome metadata genome_metadata &lt;- read_tsv(&quot;data/DMB0180_mag_info.tsv.gz&quot;) %&gt;% rename(length=mag_size) 2.1.3 Read counts read_counts &lt;- read_tsv(&quot;data/DMB0180_counts.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.1.4 Genome base hits genome_coverage &lt;- read_tsv(&quot;data/DMB0180_coverage.tsv.gz&quot;) %&gt;% rename(genome=1) %&gt;% select(all_of(c(&quot;genome&quot;,sample_metadata$sample))) %&gt;% # sort samples arrange(match(genome,genome_metadata$genome)) # sort genomes 2.1.5 Genome tree genome_tree &lt;- read_tree(&quot;data/DMB0180.tree&quot;) genome_tree$tip.label &lt;- str_replace_all(genome_tree$tip.label,&quot;&#39;&quot;, &quot;&quot;) #remove single quotes in MAG names genome_tree &lt;- keep.tip(genome_tree, tip=genome_metadata$genome) # keep only MAG tips 2.1.6 Genome annotations Downloading individual annotation files from ERDA using information in Airtable and writing them to a single compressed table takes a while. The following chunk only needs to be run once, to generate the genome_annotations table that is saved in the data directory. Note that the airtable connection requires a personal access token. read_safe &lt;- possibly(~ read_tsv(.x, show_col_types = FALSE), otherwise = tibble()) airtable(&quot;MAGs&quot;, &quot;appWbHBNLE6iAsMRV&quot;) %&gt;% #get base ID from Airtable browser URL read_airtable(., fields = c(&quot;ID&quot;,&quot;mag_name&quot;,&quot;number_genes&quot;,&quot;anno_url&quot;), id_to_col = TRUE) %&gt;% #get 3 columns from MAGs table filter(mag_name %in% paste0(genome_metadata$genome,&quot;.fa&quot;)) %&gt;% #filter by MAG name filter(number_genes &gt; 0) %&gt;% #genes need to exist select(anno_url) %&gt;% #list MAG annotation urls pull() %&gt;% purrr::map(., read_safe) %&gt;% compact() %&gt;% bind_rows() %&gt;% rename(gene=1, genome=2, contig=3) %&gt;% #rename first 3 columns write_tsv(file=&quot;data/genome_annotations.tsv.xz&quot;) #write to overall compressed file # THe resulting file is stored in ERDA, as it&#39;s too big for Github genome_annotations &lt;- read_tsv(&quot;https://sid.erda.dk/share_redirect/bYCQpuqXsK/genome_annotations.tsv.xz&quot;) 2.2 Create working objects Transform the original data files into working objects for downstream analyses. 2.2.1 Filter reads by coverage min_coverage=0.3 read_counts_filt &lt;- genome_coverage %&gt;% mutate(across(where(is.numeric), ~ ifelse(. &gt; min_coverage, 1, 0))) %&gt;% mutate(across(-1, ~ . * read_counts[[cur_column()]])) 2.2.2 Transform reads into genome counts readlength=150 genome_counts &lt;- read_counts %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) readlength=150 genome_counts_filt &lt;- read_counts_filt %&gt;% mutate(across(where(is.numeric), ~ . / (genome_metadata$length / readlength) )) 2.2.3 Distill annotations into GIFTs genome_gifts &lt;- distill(genome_annotations,GIFT_db,genomecol=2,annotcol=c(9,10,19)) 2.3 Prepare color scheme AlberdiLab projects use unified color schemes developed for the Earth Hologenome Initiative, to facilitate figure interpretation. phylum_colors &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(phylum, colors) %&gt;% unique() %&gt;% arrange(phylum) %&gt;% pull(colors, name=phylum) 2.4 Wrap working objects All working objects are wrapped into a single Rdata object to facilitate downstream usage. save(sample_metadata, genome_metadata, read_counts, genome_counts, genome_counts_filt, genome_tree, genome_gifts, phylum_colors, file = &quot;data/data.Rdata&quot;) "],["data-statistics.html", "Chapter 3 Data statistics 3.1 Sequencing reads statistics 3.2 DNA fractions 3.3 Recovered microbial fraction", " Chapter 3 Data statistics load(&quot;data/data.Rdata&quot;) 3.1 Sequencing reads statistics sample_metadata %&gt;% summarise(Total=sum(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), mean=mean(reads_post_fastp * 150 / 1000000000) %&gt;% round(2), sd=sd(reads_post_fastp * 150 / 1000000000) %&gt;% round(2)) %&gt;% unite(&quot;Average&quot;,mean, sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_idyqgt27xkgfmexmce8pjb, .table th.tinytable_css_idyqgt27xkgfmexmce8pjb { border-bottom: solid 0.1em #d3d8dc; } Total Average 231.22 6.42 ± 3.04 3.2 DNA fractions sequence_fractions &lt;- read_counts %&gt;% pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;value&quot;) %&gt;% group_by(sample) %&gt;% summarise(mags = sum(value)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% select(sample,mags,metagenomic_bases,host_bases,bases_lost_fastp_percent) %&gt;% mutate(mags_bases = mags*146) %&gt;% mutate(lowqual_bases = ((metagenomic_bases+host_bases)/(1-bases_lost_fastp_percent))-(metagenomic_bases+host_bases)) %&gt;% mutate(unmapped_bases = metagenomic_bases - mags_bases) %&gt;% mutate(unmapped_bases = ifelse(unmapped_bases &lt; 0, 0, unmapped_bases)) %&gt;% select(sample, lowqual_bases, host_bases, unmapped_bases, mags_bases) sequence_fractions %&gt;% mutate_at(vars(-sample), ~./1000000000) %&gt;% rename(&quot;Sample&quot;=1, &quot;Low quality&quot;=2, &quot;Mapped to host&quot;=3, &quot;Unmapped&quot;=4, &quot;Mapped to MAGs&quot;=5) %&gt;% tt() .table td.tinytable_css_idk285hcurwbn77odc8mad, .table th.tinytable_css_idk285hcurwbn77odc8mad { border-bottom: solid 0.1em #d3d8dc; } Sample Low quality Mapped to host Unmapped Mapped to MAGs EHI01159 0.6557902 5.56184043 0.6659322 0.20248039 EHI01166 0.7681719 2.91124087 0.8810523 1.53995602 EHI01170 0.7515269 0.92454912 4.0407599 1.05574352 EHI01206 0.1570348 3.28275650 0.5903600 0.18255942 EHI01209 0.1607838 2.01518040 0.4006019 1.71857140 EHI01217 0.1203162 1.50994524 0.3307255 1.30447262 EHI01225 0.1706390 2.89616212 0.7575952 0.35146565 EHI01226 0.1330210 2.73154453 0.5532023 0.27779595 EHI01228 0.1390788 2.93176012 0.4033978 0.58813282 EHI01229 0.1482486 2.64664468 0.3553456 0.88137718 EHI01231 0.0976212 0.05858846 0.9221751 2.10767819 EHI01232 0.1567086 0.39978728 1.9948240 1.97378977 EHI01234 0.2683155 0.62156605 1.1965149 2.80418200 EHI01235 0.2428325 3.14868669 0.8819027 0.46471873 EHI02409 0.2125589 1.09379249 1.5954292 1.70434560 EHI02410 0.3427241 0.02244679 1.4697945 1.93261967 EHI02414 0.4366777 0.93366437 1.2046483 2.06476821 EHI02422 0.2304851 0.01976206 2.8148665 0.29979976 EHI02465 0.3830957 4.95735032 0.4630791 0.47700609 EHI02469 0.2232732 1.63135038 0.8790751 1.55391844 EHI02473 0.2563424 0.12561018 2.2702075 0.36325121 EHI02496 0.5184660 1.93933998 0.9927565 4.17823691 EHI03223 0.1477155 4.60288857 0.5874895 0.33406041 EHI03267 0.1542882 0.72158927 1.9136257 2.18861256 EHI03268 0.3723647 10.81049899 0.9252823 0.06400421 EHI03271 0.4809150 9.93341297 0.7371918 0.25514595 EHI03276 0.3885288 8.39349861 0.7711438 0.80852610 EHI03278 0.3767904 9.02646945 0.7525769 0.11894751 EHI03291 0.2337248 4.57863801 0.6407042 0.13373965 EHI03294 0.5497460 7.54238106 1.4747894 2.04554891 EHI03295 0.5048869 1.70509603 6.0300521 0.16786730 EHI03296 0.4615232 8.75191466 0.6515892 0.39052985 EHI03299 0.6473563 8.99832328 2.4296544 0.35802806 EHI03300 0.7292233 2.08919724 3.1832875 6.51249819 EHI03301 0.5718311 1.28902191 3.6961635 5.64598542 EHI03302 0.4000719 4.14887859 3.7443464 0.94032906 sequence_fractions %&gt;% pivot_longer(!sample, names_to = &quot;fraction&quot;, values_to = &quot;value&quot;) %&gt;% mutate(value = value / 1000000000) %&gt;% mutate(fraction = factor(fraction, levels = c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;))) %&gt;% ggplot(., aes(x = sample, y = value, fill=fraction)) + geom_bar(position=&quot;stack&quot;, stat = &quot;identity&quot;) + scale_fill_manual(name=&quot;Sequence type&quot;, breaks=c(&quot;lowqual_bases&quot;,&quot;host_bases&quot;,&quot;unmapped_bases&quot;,&quot;mags_bases&quot;), labels=c(&quot;Low quality&quot;,&quot;Mapped to host&quot;,&quot;Unmapped&quot;,&quot;Mapped to MAGs&quot;), values=c(&quot;#CCCCCC&quot;, &quot;#bcdee1&quot;, &quot;#d8b8a3&quot;,&quot;#93655c&quot;))+ labs(x = &quot;Samples&quot;, y = &quot;Amount of data (GB)&quot;) + theme_classic() 3.3 Recovered microbial fraction singlem_table &lt;- sequence_fractions %&gt;% mutate(mags_proportion = round((mags_bases / (mags_bases + unmapped_bases))*100,2)) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(singlem_proportion = round(singlem_fraction*100,2)) %&gt;% select(sample,mags_proportion,singlem_proportion) %&gt;% mutate(mags_proportion = ifelse(singlem_proportion == 0, 0, mags_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion == 0, NA, singlem_proportion)) %&gt;% #convert zeros to NA mutate(singlem_proportion = ifelse(singlem_proportion &lt; mags_proportion, NA, singlem_proportion)) %&gt;% #if singlem is smaller, then NA, to simplify plot mutate(singlem_proportion = ifelse(singlem_proportion &gt; 100, 100, singlem_proportion)) #simplify singlem_table %&gt;% pivot_longer(!sample, names_to = &quot;proportion&quot;, values_to = &quot;value&quot;) %&gt;% left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% mutate(proportion = factor(proportion, levels = c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;))) %&gt;% ggplot(., aes(x = value, y = sample, color=proportion)) + geom_line(aes(group = sample), color = &quot;#f8a538&quot;) + geom_point() + scale_color_manual(name=&quot;Proportion&quot;, breaks=c(&quot;mags_proportion&quot;,&quot;singlem_proportion&quot;), labels=c(&quot;Recovered&quot;,&quot;Estimated&quot;), values=c(&quot;#52e1e8&quot;, &quot;#876b53&quot;))+ facet_nested(species + sample_type ~ ., scales=&quot;free&quot;,space=&quot;free&quot;)+ theme_classic() + labs(y = &quot;Samples&quot;, x = &quot;Prokaryotic fraction (%)&quot;) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1, size=6), legend.position = &quot;right&quot;, strip.background.y=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) "],["mag-catalogue.html", "Chapter 4 MAG catalogue 4.1 Genome phylogeny 4.2 Genome quality 4.3 Functional overview 4.4 Functional ordination", " Chapter 4 MAG catalogue load(&quot;data/data.Rdata&quot;) 4.1 Genome phylogeny # Generate the phylum color heatmap phylum_heatmap &lt;- read_tsv(&quot;https://raw.githubusercontent.com/earthhologenome/EHI_taxonomy_colour/main/ehi_phylum_colors.tsv&quot;) %&gt;% right_join(genome_metadata, by=join_by(phylum == phylum)) %&gt;% arrange(match(genome, genome_tree$tip.label)) %&gt;% select(genome,phylum) %&gt;% mutate(phylum = factor(phylum, levels = unique(phylum))) %&gt;% column_to_rownames(var = &quot;genome&quot;) # Generate basal tree circular_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% # extend to ultrametric for the sake of visualisation ggtree(., layout=&quot;fan&quot;, open.angle=10, size=0.5) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** # Add phylum ring circular_tree &lt;- gheatmap(circular_tree, phylum_heatmap, offset=0.55, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + geom_tiplab2(size=1, hjust=-0.1) + theme(legend.position = &quot;none&quot;, plot.margin = margin(0, 0, 0, 0), panel.margin = margin(0, 0, 0, 0)) # Flush color scale to enable a new color scheme in the next ring circular_tree &lt;- circular_tree + new_scale_fill() # Add completeness ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_gradient(low = &quot;#d1f4ba&quot;, high = &quot;#f4baba&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=completeness, y=genome, fill=contamination), offset = 0.55, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add genome-size ring circular_tree &lt;- circular_tree + new_scale_fill() + scale_fill_manual(values = &quot;#cccccc&quot;) + geom_fruit( data=genome_metadata, geom=geom_bar, mapping = aes(x=length, y=genome), offset = 0.05, orientation=&quot;y&quot;, stat=&quot;identity&quot;) # Add text circular_tree &lt;- circular_tree + annotate(&#39;text&#39;, x=2.7, y=0, label=&#39; Phylum&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.1, y=0, label=&#39; Genome quality&#39;, family=&#39;arial&#39;, size=3.5) + annotate(&#39;text&#39;, x=3.5, y=0, label=&#39; Genome size&#39;, family=&#39;arial&#39;, size=3.5) #Plot circular tree circular_tree %&gt;% open_tree(30) %&gt;% rotate_tree(90) 4.2 Genome quality genome_metadata %&gt;% summarise(completeness_mean=mean(completeness) %&gt;% round(2) %&gt;% as.character(), completeness_sd=sd(completeness) %&gt;% round(2) %&gt;% as.character(), contamination_mean=mean(contamination) %&gt;% round(2), contamination_sd=sd(contamination) %&gt;% round(2)) %&gt;% unite(&quot;Completeness&quot;,completeness_mean, completeness_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% unite(&quot;Contamination&quot;,contamination_mean, contamination_sd, sep = &quot; ± &quot;, remove = TRUE) %&gt;% tt() .table td.tinytable_css_id6r5gu8c36q6m2o6e8a0r, .table th.tinytable_css_id6r5gu8c36q6m2o6e8a0r { border-bottom: solid 0.1em #d3d8dc; } Completeness Contamination 82.66 ± 16.83 2.08 ± 2.22 #Generate quality biplot genome_biplot &lt;- genome_metadata %&gt;% select(c(genome,domain,phylum,completeness,contamination,length)) %&gt;% arrange(match(genome, rev(genome_tree$tip.label))) %&gt;% #sort MAGs according to phylogenetic tree ggplot(aes(x=completeness,y=contamination,size=length,color=phylum)) + geom_point(alpha=0.7) + ylim(c(10,0)) + scale_color_manual(values=phylum_colors) + labs(y= &quot;Contamination&quot;, x = &quot;Completeness&quot;) + theme_classic() + theme(legend.position = &quot;none&quot;) #Generate contamination boxplot genome_contamination &lt;- genome_metadata %&gt;% ggplot(aes(y=contamination)) + ylim(c(10,0)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0.40, 0),&quot;inches&quot;)) #add bottom-margin (top, right, bottom, left) #Generate completeness boxplot genome_completeness &lt;- genome_metadata %&gt;% ggplot(aes(x=completeness)) + xlim(c(50,100)) + geom_boxplot(colour = &quot;#999999&quot;, fill=&quot;#cccccc&quot;) + theme_void() + theme(legend.position = &quot;none&quot;, axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.text.x=element_blank(), axis.ticks.x=element_blank(), plot.margin = unit(c(0, 0, 0, 0.50),&quot;inches&quot;)) #add left-margin (top, right, bottom, left) #Render composite figure grid.arrange(grobs = list(genome_completeness,genome_biplot,genome_contamination), layout_matrix = rbind(c(1,1,1,1,1,1,1,1,1,1,1,4), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3), c(2,2,2,2,2,2,2,2,2,2,2,3))) 4.3 Functional overview # Aggregate basal GIFT into elements function_table &lt;- genome_gifts %&gt;% to.elements(., GIFT_db) # Generate basal tree function_tree &lt;- force.ultrametric(genome_tree, method=&quot;extend&quot;) %&gt;% ggtree(., size = 0.3) *************************************************************** * Note: * * force.ultrametric does not include a formal method to * * ultrametricize a tree &amp; should only be used to coerce * * a phylogeny that fails is.ultrametric due to rounding -- * * not as a substitute for formal rate-smoothing methods. * *************************************************************** #Add phylum colors next to the tree tips function_tree &lt;- gheatmap(function_tree, phylum_heatmap, offset=0, width=0.1, colnames=FALSE) + scale_fill_manual(values=phylum_colors) + labs(fill=&quot;Phylum&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() #Add functions heatmap function_tree &lt;- gheatmap(function_tree, function_table, offset=0.5, width=3.5, colnames=FALSE) + vexpand(.08) + coord_cartesian(clip = &quot;off&quot;) + scale_fill_gradient(low = &quot;#f4f4f4&quot;, high = &quot;steelblue&quot;, na.value=&quot;white&quot;) + labs(fill=&quot;GIFT&quot;) #Reset fill scale to use a different colour profile in the heatmap function_tree &lt;- function_tree + new_scale_fill() # Add completeness barplots function_tree &lt;- function_tree + geom_fruit(data=genome_metadata, geom=geom_bar, grid.params=list(axis=&quot;x&quot;, text.size=2, nbreak = 1), axis.params=list(vline=TRUE), mapping = aes(x=length, y=genome, fill=completeness), offset = 3.8, orientation=&quot;y&quot;, stat=&quot;identity&quot;) + scale_fill_gradient(low = &quot;#cf8888&quot;, high = &quot;#a2cc87&quot;) + labs(fill=&quot;Genome\\ncompleteness&quot;) function_tree 4.4 Functional ordination # Generate the tSNE ordination tSNE_function &lt;- Rtsne(X=function_table, dims = 2, check_duplicates = FALSE) # Plot the ordination function_ordination &lt;- tSNE_function$Y %&gt;% as.data.frame() %&gt;% mutate(genome=rownames(function_table)) %&gt;% inner_join(genome_metadata, by=&quot;genome&quot;) %&gt;% rename(tSNE1=&quot;V1&quot;, tSNE2=&quot;V2&quot;) %&gt;% select(genome,phylum,tSNE1,tSNE2, length) %&gt;% ggplot(aes(x = tSNE1, y = tSNE2, color = phylum, size=length))+ geom_point(shape=16, alpha=0.7) + scale_color_manual(values=phylum_colors) + theme_minimal() + labs(color=&quot;Phylum&quot;, size=&quot;Genome size&quot;) + guides(color = guide_legend(override.aes = list(size = 5))) # enlarge Phylum dots in legend function_ordination "],["compositional-analysis.html", "Chapter 5 Compositional analysis 5.1 Taxonomy boxplot", " Chapter 5 Compositional analysis load(&quot;data/data.Rdata&quot;) 5.0.1 Taxonomy barplot per individual genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata left_join(., sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata filter(!is.na(count)) %&gt;% ggplot(aes(y=count,x=sample, fill=phylum, group=phylum)) + #grouping enables keeping the same sorting of taxonomic units geom_bar(stat=&quot;identity&quot;, colour=&quot;white&quot;, linewidth=0.1) + #plot stacked bars with white borders scale_fill_manual(values=phylum_colors) + labs(x = &quot;Relative abundance&quot;, y =&quot;Samples&quot;) + facet_nested(. ~ latitude , scales=&quot;free&quot;, space=&quot;free&quot;) + #facet per day and treatment scale_y_continuous(expand = c(0.001, 0.001)) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), axis.title.x = element_blank(), panel.background = element_blank(), panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(linewidth = 0.5, linetype = &quot;solid&quot;, colour = &quot;black&quot;), legend.position = &quot;none&quot;, strip.background.x=element_rect(color = NA, fill= &quot;#f4f4f4&quot;)) 5.1 Taxonomy boxplot 5.1.1 Family family_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(., genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,family) %&gt;% summarise(relabun=sum(count)) family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_idvlv5nmc730hc51zuu7f4, .table th.tinytable_css_idvlv5nmc730hc51zuu7f4 { border-bottom: solid 0.1em #d3d8dc; } family mean sd Enterobacteriaceae 0.2260997255 0.3303816262 Clostridiaceae 0.1213421063 0.2330845042 Mycoplasmoidaceae 0.0863355384 0.2438376126 Planococcaceae 0.0846271516 0.2127037322 Chlamydiaceae 0.0676274195 0.1924605966 Helicobacteraceae 0.0591769972 0.1062713356 Enterococcaceae 0.0544722685 0.1442209643 WRBN01 0.0478970261 0.1450129565 Amphibacillaceae 0.0414919086 0.1238701545 Mycobacteriaceae 0.0362214127 0.0888482692 Ruminococcaceae 0.0317729379 0.1237306561 Pasteurellaceae 0.0160104500 0.0918844694 Peptostreptococcaceae 0.0127118629 0.0530168464 Streptococcaceae 0.0115228988 0.0370924610 Gemellaceae 0.0108513143 0.0253639258 Rhizobiaceae 0.0091527810 0.0319431934 Lactobacillaceae 0.0090839293 0.0303798605 Pseudomonadaceae 0.0089857150 0.0453107746 Flavobacteriaceae 0.0065346783 0.0189358723 Nocardioidaceae 0.0053320800 0.0251446578 Aeromonadaceae 0.0050102595 0.0145193038 Carnobacteriaceae 0.0046027845 0.0159949985 Brevinemataceae 0.0044959719 0.0147529908 Nitrosomonadaceae 0.0043720239 0.0159013707 Propionibacteriaceae 0.0041565280 0.0156546353 Burkholderiaceae_C 0.0040456376 0.0186599352 0.0038552913 0.0228770517 Metamycoplasmataceae 0.0034661588 0.0134828593 Nakamurellaceae 0.0025889223 0.0117217190 Diplorickettsiaceae 0.0023901940 0.0093030519 Vagococcaceae 0.0017129309 0.0100110122 Xanthomonadaceae 0.0017093132 0.0051963993 Brevibacteriaceae 0.0016817297 0.0037747124 UBA6265 0.0015435620 0.0058896833 Dysgonomonadaceae 0.0012528434 0.0043661910 Staphylococcaceae 0.0012359225 0.0039153097 Micrococcaceae 0.0012278026 0.0030084446 Dermatophilaceae 0.0011184852 0.0037347159 JAJYRW01 0.0006050669 0.0028464005 Dermabacteraceae 0.0003797951 0.0013764065 Streptomycetaceae 0.0003679523 0.0018413767 Rhodobacteraceae 0.0002971233 0.0010375666 Moraxellaceae 0.0002807684 0.0012927606 Desulfovibrionaceae 0.0001771450 0.0010628699 UBA10027 0.0001755856 0.0007353618 family_arrange &lt;- family_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(family) %&gt;% summarise(mean=sum(relabun)) %&gt;% arrange(-mean) %&gt;% select(family) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% pull() family_summary %&gt;% left_join(genome_metadata %&gt;% select(family,phylum) %&gt;% unique(),by=join_by(family==family)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(family= sub(&quot;^f__&quot;, &quot;&quot;, family)) %&gt;% filter(family %in% family_arrange[1:20]) %&gt;% mutate(family=factor(family,levels=rev(family_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=family, group=family, color=phylum, fill=phylum)) + scale_color_manual(values=phylum_colors[-8]) + scale_fill_manual(values=phylum_colors[-8]) + #geom_boxplot(alpha=0.2) + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() + theme(legend.position = &quot;none&quot;) 5.1.2 Genus genus_summary &lt;- genome_counts_filt %&gt;% mutate_at(vars(-genome),~./sum(.)) %&gt;% #apply TSS nornalisation pivot_longer(-genome, names_to = &quot;sample&quot;, values_to = &quot;count&quot;) %&gt;% #reduce to minimum number of columns left_join(sample_metadata, by = join_by(sample == sample)) %&gt;% #append sample metadata left_join(genome_metadata, by = join_by(genome == genome)) %&gt;% #append genome metadata group_by(sample,genus) %&gt;% summarise(relabun=sum(count)) %&gt;% filter(genus != &quot;g__&quot;) genus_summary %&gt;% filter(!is.na(relabun)) %&gt;% group_by(genus) %&gt;% summarise(mean=mean(relabun),sd=sd(relabun)) %&gt;% arrange(-mean) %&gt;% tt() .table td.tinytable_css_ideionvh63a8x2w0fw12fw, .table th.tinytable_css_ideionvh63a8x2w0fw12fw { border-bottom: solid 0.1em #d3d8dc; } genus mean sd g__Sporosarcina 0.0846271516 0.2127037322 g__Hafnia 0.0697050200 0.1979937824 g__Escherichia 0.0682986810 0.2154166469 g__Sarcina 0.0616335790 0.1513980722 g__Helicobacter_G 0.0575673918 0.1067885205 g__Malacoplasma 0.0566047643 0.2200629586 g__JAHHUI01 0.0478970261 0.1450129565 g__Gibbsiella 0.0375163586 0.1331374371 g__Clostridium 0.0348671643 0.1370063526 g__Pseudogracilibacillus 0.0310213856 0.1065034415 g__Enterococcus 0.0303951049 0.0652840572 g__Mycoplasmoides 0.0297307741 0.1203787705 g__Dwaynesavagella 0.0248413630 0.0898066069 g__Enterococcus_B 0.0240771636 0.1340743748 g__Corynebacterium 0.0200407533 0.0726807176 g__Providencia 0.0197524789 0.1074603374 g__Vespertiliibacter 0.0160104500 0.0918844694 g__Rhodococcus 0.0127992168 0.0463486578 g__CCUG-7971 0.0127118629 0.0530168464 g__Moellerella 0.0105737012 0.0621763640 g__Lactococcus 0.0090100614 0.0344129141 g__Leuconostoc 0.0089204969 0.0304023307 g__Entomomonas 0.0086357514 0.0453118465 g__Lonsdalea 0.0060945012 0.0276592580 g__Orbus 0.0048861392 0.0194990600 g__Atopostipes 0.0046027845 0.0159949985 g__JAJYTI01 0.0045512379 0.0133704456 g__Brevinema 0.0044959719 0.0147529908 g__Nitrosospira 0.0043720239 0.0159013707 g__JAJYRX01 0.0036739457 0.0185901887 g__UBA710 0.0034661588 0.0134828593 g__Nocardioides 0.0033032146 0.0142888830 g__Serratia_J 0.0029343199 0.0176059194 g__Citrobacter 0.0026415619 0.0157403475 g__Oceanisphaera 0.0026120064 0.0108672251 g__Nakamurella 0.0025889223 0.0117217190 g__Lactococcus_A 0.0025128375 0.0147931872 g__Dietzia 0.0024936564 0.0091548892 g__Aeromonas 0.0023982530 0.0102761891 g__Aquirickettsiella 0.0023901940 0.0093030519 g__SCSIO-66511 0.0020288654 0.0110497988 g__JAJYSO01 0.0019834404 0.0057117996 g__Vagococcus_E 0.0017129309 0.0100110122 g__Luteimonas 0.0017093132 0.0051963993 g__Brevibacterium 0.0016817297 0.0037747124 g__Helicobacter_C 0.0016096054 0.0078688464 g__UBA6265 0.0015435620 0.0058896833 g__Dysgonomonas 0.0012528434 0.0043661910 g__Enteractinococcus 0.0012278026 0.0030084446 g__Serratia_A 0.0011788767 0.0058776865 g__Janibacter 0.0011184852 0.0037347159 g__Rahnella 0.0009194166 0.0045681476 g__Gordonia 0.0008877863 0.0030066533 g__Virgibacillus_B 0.0008276914 0.0030718059 g__Staphylococcus 0.0007599545 0.0026279285 g__Klebsiella 0.0007122893 0.0042737361 g__JAJYRW01 0.0006050669 0.0028464005 g__Buttiauxella 0.0005748894 0.0034493365 g__Mammaliicoccus 0.0004759680 0.0016512999 g__Brachybacterium 0.0003797951 0.0013764065 g__Paenalcaligenes 0.0003716919 0.0018401245 g__Shinella 0.0003705127 0.0022230759 g__Streptomyces 0.0003679523 0.0018413767 g__Pseudomonas_E 0.0003499636 0.0020997817 g__Yersinia 0.0003114917 0.0018689501 g__Alkanindiges 0.0002807684 0.0012927606 g__Lawsonia 0.0001771450 0.0010628699 g__Weissella 0.0001634323 0.0009805940 g__Pseudaminobacter 0.0001532789 0.0009196736 genus_arrange &lt;- genus_summary %&gt;% group_by(genus) %&gt;% summarise(mean=sum(relabun)) %&gt;% filter(genus != &quot;g__&quot;)%&gt;% arrange(-mean) %&gt;% select(genus) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% pull() genus_summary %&gt;% left_join(genome_metadata %&gt;% select(genus,phylum) %&gt;% unique(),by=join_by(genus==genus)) %&gt;% left_join(sample_metadata,by=join_by(sample==sample)) %&gt;% mutate(genus= sub(&quot;^g__&quot;, &quot;&quot;, genus)) %&gt;% filter(genus %in% genus_arrange[1:20]) %&gt;% mutate(genus=factor(genus,levels=rev(genus_arrange[1:20]))) %&gt;% filter(relabun &gt; 0) %&gt;% ggplot(aes(x=relabun, y=genus, group=genus, color=phylum)) + scale_color_manual(values=phylum_colors) + #geom_boxplot() + geom_jitter(alpha=0.5) + facet_nested(. ~ species + sample_type)+ theme_minimal() "],["alpha-diversity.html", "Chapter 6 Alpha diversity 6.1 Summary table", " Chapter 6 Alpha diversity load(&quot;data/data.Rdata&quot;) 6.1 Summary table # Calculate Hill numbers richness &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 0) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(richness = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) neutral &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(neutral = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) phylogenetic &lt;- genome_counts_filt %&gt;% column_to_rownames(var = &quot;genome&quot;) %&gt;% dplyr::select(where(~ !all(. == 0))) %&gt;% hilldiv(., q = 1, tree = genome_tree) %&gt;% t() %&gt;% as.data.frame() %&gt;% dplyr::rename(phylogenetic = 1) %&gt;% rownames_to_column(var = &quot;sample&quot;) # Merge all metrics alpha_div &lt;- richness %&gt;% full_join(neutral, by = join_by(sample == sample)) %&gt;% full_join(phylogenetic, by = join_by(sample == sample)) "],["beta-diversity.html", "Chapter 7 Beta diversity", " Chapter 7 Beta diversity load(&quot;data/data.Rdata&quot;) beta_q0n &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 0) beta_q1n &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1) genome_counts &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0))%&gt;% rownames_to_column(., &quot;genome&quot;) genome_tree &lt;- keep.tip(genome_tree, tip=genome_counts$genome) beta_q1p &lt;- genome_counts %&gt;% column_to_rownames(., &quot;genome&quot;) %&gt;% filter(rowSums(. != 0, na.rm = TRUE) &gt; 0) %&gt;% select_if(~!all(. == 0)) %&gt;% hillpair(., q = 1, tree = genome_tree) "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
